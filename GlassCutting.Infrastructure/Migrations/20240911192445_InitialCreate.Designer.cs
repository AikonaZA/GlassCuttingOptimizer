// <auto-generated />
using GlassCutting.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlassCutting.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240911192445_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("GlassCutting.Core.Entities.CutLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockSheetId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WastePercentage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CutLayouts");
                });

            modelBuilder.Entity("GlassCutting.Core.Entities.CutPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CutLayoutId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CutLayoutId");

                    b.ToTable("CutPositions");
                });

            modelBuilder.Entity("GlassCutting.Core.Entities.GlassPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GlassPanels");
                });

            modelBuilder.Entity("GlassCutting.Core.Entities.StockSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("StockSheets");
                });

            modelBuilder.Entity("GlassCutting.Core.Entities.CutPosition", b =>
                {
                    b.HasOne("GlassCutting.Core.Entities.CutLayout", null)
                        .WithMany("CutPositions")
                        .HasForeignKey("CutLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlassCutting.Core.Entities.CutLayout", b =>
                {
                    b.Navigation("CutPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
